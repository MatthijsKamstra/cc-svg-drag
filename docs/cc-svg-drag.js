// Generated by Haxe 4.0.3
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var App = function() { };
App.__name__ = true;
var MainSVGDrag = function() {
	this.boundaryY2 = 19.2;
	this.boundaryY1 = 2.2;
	this.boundaryX2 = 30;
	this.boundaryX1 = 10.5;
	var _gthis = this;
	window.document.addEventListener("DOMContentLoaded",function(event) {
		window.console.info("" + App.NAME + " Dom ready :: build: " + "2019-12-24 13:28:43" + " ");
		_gthis.init1();
	});
};
MainSVGDrag.__name__ = true;
MainSVGDrag.main = function() {
	var app = new MainSVGDrag();
};
MainSVGDrag.prototype = {
	init1: function() {
		var svgs = window.document.getElementsByTagName("svg");
		console.log("src/MainSVGDrag.hx:23:","svgs : " + svgs.length);
		var _g = 0;
		var _g1 = svgs.length;
		while(_g < _g1) {
			var i = _g++;
			var _svg = svgs[i];
			this.wrap(_svg);
			var children = _svg.children;
			var _g2 = 0;
			while(_g2 < children.length) {
				var i1 = children[_g2];
				++_g2;
				var child = i1;
				child.setAttribute("class","shadow draggable");
				this.makeDraggable(child);
				if(child.tagName == "g") {
					console.log("src/MainSVGDrag.hx:39:","deeper in the rabithole");
				}
			}
		}
	}
	,makeDraggable: function(el) {
		console.log("src/MainSVGDrag.hx:63:","makeDraggable \"" + el.tagName + "\"");
		var svg = el;
		svg.addEventListener("mousedown",$bind(this,this.startDrag));
		svg.addEventListener("mousemove",$bind(this,this.drag));
		svg.addEventListener("mouseup",$bind(this,this.endDrag));
		svg.addEventListener("mouseleave",$bind(this,this.endDrag));
	}
	,getMousePosition: function(evt) {
		var svg = evt.explicitOriginalTarget.farthestViewportElement;
		var CTM = svg.getScreenCTM();
		return { x : (evt.clientX - CTM.e) / CTM.a, y : (evt.clientY - CTM.f) / CTM.d};
	}
	,startDrag: function(evt) {
		var svg = evt.explicitOriginalTarget.farthestViewportElement;
		this.selectedElement = evt.target;
		this.offset = this.getMousePosition(evt);
		var transforms = this.selectedElement.transform.baseVal;
		if(transforms.length == 0 || transforms.getItem(0).type != 2) {
			var translate = svg.createSVGTransform();
			translate.setTranslate(0,0);
			this.selectedElement.transform.baseVal.insertItemBefore(translate,0);
		}
		this.transform = transforms.getItem(0);
		this.offset.x -= this.transform.matrix.e;
		this.offset.y -= this.transform.matrix.f;
		this.confined = (js_Boot.__cast(evt.target , Element)).classList.contains("confine");
		if(this.confined) {
			this.bbox = this.selectedElement.getBBox();
			this.minX = this.boundaryX1 - this.bbox.x;
			this.maxX = this.boundaryX2 - this.bbox.x - this.bbox.width;
			this.minY = this.boundaryY1 - this.bbox.y;
			this.maxY = this.boundaryY2 - this.bbox.y - this.bbox.height;
		}
	}
	,drag: function(evt) {
		if(this.selectedElement != null) {
			evt.preventDefault();
			var coord = this.getMousePosition(evt);
			var dx = coord.x - this.offset.x;
			var dy = coord.y - this.offset.y;
			if(this.confined) {
				if(dx < this.minX) {
					dx = this.minX;
				} else if(dx > this.maxX) {
					dx = this.maxX;
				}
				if(dy < this.minY) {
					dy = this.minY;
				} else if(dy > this.maxY) {
					dy = this.maxY;
				}
			}
			this.transform.setTranslate(dx,dy);
		}
	}
	,endDrag: function(evt) {
		this.selectedElement = null;
	}
	,wrap: function(el) {
		var wrapper = window.document.createElement("div");
		wrapper.className = "cc-svg-drag-wrapper";
		el.parentNode.insertBefore(wrapper,el);
		wrapper.appendChild(el);
	}
	,__class__: MainSVGDrag
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
App.NAME = "[cc-svg-drag]";
MainSVGDrag.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=cc-svg-drag.js.map